articles = []
article = {}
count = 0
start_collecting = False

# Parse the RIS file from article 1 to the last article
for line in ris_data:
    if line.startswith('ER  -'):
        count += 1
        if count == 0:
            start_collecting = True  # Start collecting from 1st article
        if count > 2266:  # Assuming 2266 is the total number of articles
            break
        if article:
            articles.append(article)  # Append article at the end of each entry
    elif start_collecting:
        if line.startswith('TY  -'):
            article = {}
        elif line.startswith('AU  -'):
            article['Author'] = article.get('Author', '') + line[6:].strip() + ', '
        elif line.startswith('TI  -'):
            article['Title'] = line[6:].strip()
        elif line.startswith('T2  -'):
            article['Journal'] = line[6:].strip()
        elif line.startswith('DO  -'):
            article['DOI'] = line[6:].strip()

# Convert the list of articles to DataFrame
articles_df_1_last = pd.DataFrame(articles)

# Reaplicando o mapeamento expandido nos artigos usando todas as informações disponíveis
for article in articles:
    article['Ethical Themes'] = map_ethical_themes_extended(article)

# Convertendo a lista de artigos para DataFrame novamente
articles_df_extended_1_last = pd.DataFrame(articles)

# Filtrando apenas os artigos com temas éticos identificados
filtered_articles_df_with_themes_extended_1_last = articles_df_extended_1_last[articles_df_extended_1_last['Ethical Themes'] != ""]

# Salvando os resultados
output_path_extended_1_last = '/mnt/data/filtered_articles_ethics_ai_health_policy_extended_1_last.xlsx'
filtered_articles_df_with_themes_extended_1_last.to_excel(output_path_extended_1_last, index=False)

tools.display_dataframe_to_user(name="Filtered Articles with Ethical Themes (1-last)", dataframe=filtered_articles_df_with_themes_extended_1_last)
